openapi: 3.0.0
info:
  title: MicroPantry API
  description: |
    API for the MicroPantry application, providing endpoints for managing pantry items, 
    shopping lists, user profiles, and AI-powered features for food management.
    
    ## Authentication
    This API uses Firebase Authentication. All endpoints require a valid Firebase ID token
    to be included in the Authorization header as a Bearer token.
  version: 1.0.0
  contact:
    name: MicroPantry Support
servers:
  - url: https://us-central1-pantryapp-fd04e.cloudfunctions.net/api
    description: Production server

components:
  schemas:
    UserProfile:
      type: object
      properties:
        displayName:
          type: string
          description: User's display name
          minLength: 1
        preferences:
          type: object
          properties:
            dietaryRestrictions:
              type: array
              items:
                type: string
              description: List of dietary restrictions
          description: User preferences object
      required:
        - displayName

    UserProfileResponse:
      type: object
      properties:
        displayName:
          type: string
          description: User's display name
        email:
          type: string
          format: email
          description: User's email address (from authentication)
        preferences:
          type: object
          properties:
            dietaryRestrictions:
              type: array
              items:
                type: string
              description: List of dietary restrictions
          description: User preferences object
        updatedAt:
          type: object
          properties:
            _seconds:
              type: integer
            _nanoseconds:
              type: integer
          description: Last update timestamp (server-controlled)
        createdAt:
          type: object
          properties:
            _seconds:
              type: integer
            _nanoseconds:
              type: integer
          description: Creation timestamp (server-controlled)

    ShoppingListItem:
      type: object
      properties:
        name:
          type: string
          description: Name of the item
        quantity:
          type: number
          description: Quantity of the item
        unit:
          type: string
          description: Unit of measurement
        category:
          type: string
          description: Category of the item
        isChecked:
          type: boolean
          description: Whether the item is checked
          default: false

    ShoppingList:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItem'

    PantryItem:
      type: object
      properties:
        name:
          type: string
          description: Name of the item
        quantity:
          type: number
          description: Quantity of the item
        unit:
          type: string
          description: Unit of measurement
        category:
          type: string
          description: Category of the item
        expiryDate:
          type: string
          format: date-time
          description: Expiration date of the item
        customImage:
          type: string
          nullable: true
          description: URL of custom image for the item
        isCustom:
          type: boolean
          description: Whether this is a custom item
        purchaseDate:
          type: string
          format: date-time
          description: Date when the item was purchased

    Recipe:
      type: object
      properties:
        name:
          type: string
          description: Name of the recipe
        description:
          type: string
          description: Description of the recipe
        ingredients:
          type: array
          items:
            type: string
          description: List of ingredients
        instructions:
          type: array
          items:
            type: string
          description: List of instructions
        prepTime:
          type: number
          description: Preparation time in minutes
        cookTime:
          type: number
          description: Cooking time in minutes
        servings:
          type: number
          description: Number of servings
        nutrition:
          type: object
          description: Nutrition information
        image:
          type: string
          nullable: true
          description: URL of recipe image
        tags:
          type: array
          items:
            type: string
          description: Recipe tags
        isFavorite:
          type: boolean
          description: Whether this is a favorite recipe
          default: false

    MealPlan:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        meals:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              type:
                type: string
                enum: [breakfast, lunch, dinner, snack]
              recipeId:
                type: string
                nullable: true
              recipeName:
                type: string
                nullable: true
              notes:
                type: string
                nullable: true

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message

  securitySchemes:
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Firebase ID token obtained through Firebase Authentication.
        The token should be included in the Authorization header as: `Bearer <token>`.

security:
  - FirebaseAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Simple health check endpoint that doesn't require authentication
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /user/profile:
    post:
      summary: Create or update user profile
      description: |
        Creates or updates the profile data for the authenticated user in Firestore.
        This endpoint requires Firebase Authentication - the user must be registered
        through Firebase Auth first.
      security:
        - FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: Profile created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - User ID mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/profile/{userId}:
    get:
      summary: Get user profile
      description: |
        Retrieves a user profile. The authenticated user can only access their own profile.
        The userId must match the authenticated user's ID.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Attempting to access another user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/create:
    post:
      summary: Create a new shopping list
      operationId: createShoppingList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingList'
      responses:
        '200':
          description: Shopping list created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  listId:
                    type: string

  /shopping-lists/{userId}:
    get:
      summary: Get user's shopping lists
      operationId: getShoppingLists
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shopping lists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  lists:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        userId:
                          type: string
                        name:
                          type: string
                        createdAt:
                          type: object
                        updatedAt:
                          type: object

  /shopping-list/{listId}:
    get:
      summary: Get shopping list items
      operationId: getShoppingListItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shopping list items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: object
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShoppingListItem'
        '404':
          description: Shopping list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/{listId}/add:
    post:
      summary: Add items to shopping list
      operationId: addShoppingListItems
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/ShoppingListItem'
      responses:
        '200':
          description: Items added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Shopping list not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/{listId}/item/{itemId}:
    put:
      summary: Update shopping list item
      operationId: updateShoppingListItem
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListItem'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pantry/add:
    post:
      summary: Add items to pantry
      operationId: addPantryItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/PantryItem'
      responses:
        '200':
          description: Items added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pantry/{userId}:
    get:
      summary: Get user's pantry items
      operationId: getPantryItems
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pantry items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PantryItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pantry/item/{userId}/{itemId}:
    put:
      summary: Update pantry item
      operationId: updatePantryItem
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PantryItem'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete pantry item
      operationId: deletePantryItem
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /meal-plan/create:
    post:
      summary: Create a meal plan
      operationId: createMealPlan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlan'
      responses:
        '200':
          description: Meal plan created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  mealPlanId:
                    type: string

  /meal-plans/{userId}:
    get:
      summary: Get user's meal plans
      operationId: getMealPlans
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Meal plans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        createdAt:
                          type: object
                        updatedAt:
                          type: object

  /meal-plan/{planId}:
    get:
      summary: Get meal plan details
      operationId: getMealPlanDetails
      parameters:
        - name: planId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Meal plan details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    type: object
                    properties:
                      id:
                        type: string
                      userId:
                        type: string
                      name:
                        type: string
                      createdAt:
                        type: object
                      updatedAt:
                        type: object
                  meals:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        date:
                          type: string
                          format: date-time
                        recipeId:
                          type: string
                        notes:
                          type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Meal plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recipe/save:
    post:
      summary: Save a recipe
      operationId: saveRecipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                recipe:
                  $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: Recipe saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  recipeId:
                    type: string

  /recipes/{userId}:
    get:
      summary: Get user's recipes
      operationId: getUserRecipes
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recipes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        userId:
                          type: string
                        name:
                          type: string
                        ingredients:
                          type: array
                          items:
                            type: string
                        instructions:
                          type: array
                          items:
                            type: string
                        createdAt:
                          type: object
                        updatedAt:
                          type: object
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /recipe/{recipeId}:
    get:
      summary: Get recipe details
      operationId: getRecipeDetails
      parameters:
        - name: recipeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recipe details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  userId:
                    type: string
                  name:
                    type: string
                  ingredients:
                    type: array
                    items:
                      type: string
                  instructions:
                    type: array
                    items:
                      type: string
                  createdAt:
                    type: object
                  updatedAt:
                    type: object
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /ai-chef/query:
    post:
      summary: Process natural language request for AI Chef
      operationId: queryAiChef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                query:
                  type: string
              required:
                - userId
                - query
      responses:
        '200':
          description: Query processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /ai-chef/customize:
    post:
      summary: Process natural language request for AI Chef with nutritional customization
      operationId: customizeAiChef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                query:
                  type: string
                nutritionalPreferences:
                  type: object
                  properties:
                    protein:
                      type: number
                      description: Target protein in grams
                    carbs:
                      type: number
                      description: Target carbohydrates in grams
                    fat:
                      type: number
                      description: Target fat in grams
                    calories:
                      type: number
                      description: Target calories
                    dietaryRestrictions:
                      type: array
                      items:
                        type: string
                      description: List of dietary restrictions
              required:
                - userId
                - query
      responses:
        '200':
          description: Customized query processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /recipes/search:
    post:
      summary: Search for recipes based on natural language query
      operationId: searchRecipes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
              required:
                - query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object

  /food/search:
    get:
      summary: Search food database
      operationId: searchFood
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Food search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        category:
                          type: string
                        nutritionInfo:
                          type: object
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /food/recognize:
    post:
      summary: Recognize food items in an image
      operationId: recognizeFood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                  format: uri
              required:
                - imageUrl
      responses:
        '200':
          description: Food recognition results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      recognizedItems:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            category:
                              type: string
                            confidence:
                              type: number

  /food/nutrition/{foodId}:
    get:
      summary: Get nutrition information for a food item
      operationId: getFoodNutrition
      parameters:
        - name: foodId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Nutrition information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  nutrition:
                    type: object
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /receipt/process:
    post:
      summary: Process receipt image
      operationId: processReceipt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                imageUrl:
                  type: string
                  format: uri
              required:
                - userId
                - imageUrl
      responses:
        '200':
          description: Receipt processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  store:
                    type: string
                  date:
                    type: string
                    format: date-time
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        price:
                          type: number
                        quantity:
                          type: integer
                  total:
                    type: number
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /receipt/scan:
    post:
      summary: Scan receipt using AI vision
      operationId: scanReceipt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                  format: uri
              required:
                - imageUrl
      responses:
        '200':
          description: Receipt scanned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            price:
                              type: number
                            quantity:
                              type: integer
                            total:
                              type: number

  /barcode/process:
    post:
      summary: Process barcode
      operationId: processBarcode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
              required:
                - barcode
      responses:
        '200':
          description: Barcode processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    type: object
                    properties:
                      name:
                        type: string
                      brand:
                        type: string
                      nutrition:
                        type: object
                        properties:
                          calories:
                            type: number
                          protein:
                            type: number
                          fat:
                            type: number
                          carbs:
                            type: number
                      alternatives:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            price:
                              type: number
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /micronutrition/analyze:
    post:
      summary: Analyze food item micronutrition
      operationId: analyzeMicronutrition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                foodName:
                  type: string
              required:
                - foodName
      responses:
        '200':
          description: Micronutrition analysis completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foodName:
                    type: string
                  analysis:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string 